// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // Usar foreignKeys para melhor controle pelo banco
  relationMode = "foreignKeys"
}

// Enum para Módulos (sem alteração)
enum ModuloEnum {
  DIRETORIA
  MARKETING
  OPERACIONAL
  FINANCEIRO
  ADMINISTRATIVO
  JURIDICO
  RH
  SISTEMA
}

// Enum para Status do Usuário (sem alteração)
enum UserStatus {
  Ativo
  Inativo
  Ferias // Férias
  Atestado
}

model Department {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  accessModule ModuloEnum

  roles        Role[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Role {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  departmentId  String
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Cascade) // onUpdate: Cascade

  isDirector    Boolean @default(false)

  users         User[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([departmentId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  cpf           String?   @unique
  rg            String?
  birthDate     DateTime?
  phone         String?
  // address       String? // REMOVIDO CAMPO ANTIGO

  // --- NOVOS CAMPOS DE ENDEREÇO ---
  cep           String? // Código Postal
  logradouro    String? // Rua, Avenida, etc.
  numero        String? // Número do imóvel
  complemento   String? // Apartamento, Bloco, etc.
  bairro        String? // Bairro
  cidade        String? // Cidade
  estado        String? // UF ou Estado por extenso
  pais          String? @default("Brasil") // País, com default Brasil
  // --- FIM NOVOS CAMPOS ---

  admissionDate DateTime  @default(now())
  status        UserStatus @default(Ativo)
  salary        Float?

  roleId        String?
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade) // onUpdate: Cascade

  managerId     String?
  manager       User?     @relation("ManagedBy", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: Cascade) // onUpdate: Cascade
  managedUsers  User[]    @relation("ManagedBy")

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([roleId])
  @@index([managerId])
}

// ---- Modelos Obrigatórios para NextAuth.js PrismaAdapter ----
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // onUpdate: Cascade

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // onUpdate: Cascade

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}