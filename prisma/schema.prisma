// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// Enum para Módulos
enum ModuloEnum {
  DIRETORIA
  MARKETING
  OPERACIONAL
  FINANCEIRO
  ADMINISTRATIVO
  JURIDICO
  RH
  SISTEMA
}

// Enum para Status do Usuário
enum UserStatus {
  Ativo
  Inativo
  Ferias
  Atestado
}

// Enum para Tipo de Batida de Ponto
enum PontoTipo {
  ENTRADA
  SAIDA
}

// Enum para Origem da Batida de Ponto
enum PontoSource {
  AUTOMATICO
  MANUAL
}

model Department {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  accessModule ModuloEnum

  roles        Role[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Role {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  departmentId  String
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  isDirector    Boolean @default(false)
  hierarchyLevel Int    @default(99)
  iconName      String?
  users         User[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([departmentId])
  @@index([hierarchyLevel])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  cpf           String?   @unique
  rg            String?
  birthDate     DateTime?
  phone         String?
  // Endereço Detalhado
  cep           String?
  logradouro    String?
  numero        String?
  complemento   String?
  bairro        String?
  cidade        String?
  estado        String?
  pais          String?   @default("Brasil")

  admissionDate DateTime  @default(now())
  status        UserStatus @default(Ativo)
  salary        Float?
  roleId        String?
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  managerId     String?
  manager       User?     @relation("ManagedBy", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  managedUsers  User[]    @relation("ManagedBy")

  accounts      Account[]
  sessions      Session[]

  // Relações para o Chat
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")

  // Relação para Registros de Ponto
  pontoRegistros PontoRegistro[] // <-- Relação adicionada

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([roleId])
  @@index([managerId])
}

// ---- Modelos Obrigatórios para NextAuth.js PrismaAdapter ----
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// MODELO PARA MENSAGENS DE CHAT
model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  readAt    DateTime?
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  receiverId String
  receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([senderId, createdAt(sort: Desc)])
  @@index([receiverId, createdAt(sort: Desc)])
  @@index([senderId, receiverId, createdAt(sort: Desc)])
  @@index([receiverId, senderId, createdAt(sort: Desc)])
}

// **** NOVO MODELO PARA REGISTROS DE PONTO ****
model PontoRegistro {
  id         String      @id @default(cuid())
  timestamp  DateTime    // Momento exato da batida
  type       PontoTipo   // ENTRADA ou SAIDA
  source     PontoSource // AUTOMATICO ou MANUAL
  userId     String      // ID do usuário que fez a batida
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relação com User

  justificativa String?   // Opcional: para registros manuais ou edições

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([timestamp])
  @@index([userId, timestamp]) // Índice composto para buscas por usuário e data
}