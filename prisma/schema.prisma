// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// --- ENUMS ---
enum ModuloEnum {
  DIRETORIA
  MARKETING
  OPERACIONAL
  FINANCEIRO
  ADMINISTRATIVO
  JURIDICO
  RH
  SISTEMA
  PERMISSOES
}

enum UserStatus {
  Ativo
  Inativo
  Ferias
  Atestado
}

enum PontoTipo {
  ENTRADA
  SAIDA
}

enum PontoSource {
  AUTOMATICO
  MANUAL
}

enum SolicitacaoStatus {
  PENDENTE
  APROVADO
  REJEITADO
}

enum SolicitacaoTipo {
  FERIAS
  ATESTADO
  LICENCA_NAO_REMUNERADA
  OUTRO
}

enum PermissionTargetType {
  DEPARTMENT
  ROLE
  USER
}


// --- MODELOS ---

model Department {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  roles        Role[]
  permissions  Permission[] @relation("DepartmentPermissions")

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Role {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  departmentId  String
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  isDirector    Boolean @default(false)
  hierarchyLevel Int    @default(99)
  iconName      String?
  users         User[]
  permissions   Permission[] @relation("RolePermissions")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([departmentId])
  @@index([hierarchyLevel])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  cpf           String?   @unique
  rg            String?
  birthDate     DateTime?
  phone         String?
  cep           String?
  logradouro    String?
  numero        String?
  complemento   String?
  bairro        String?
  cidade        String?
  estado        String?
  pais          String?   @default("Brasil")
  admissionDate DateTime  @default(now())
  status        UserStatus @default(Ativo)
  salary        Float?
  roleId        String?
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  managerId     String?
  manager       User?     @relation("ManagedBy", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  managedUsers  User[]    @relation("ManagedBy")
  accounts      Account[]
  sessions      Session[]
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
  pontoRegistros PontoRegistro[]
  solicitacoes   Solicitacao[]
  permissions   Permission[] @relation("UserPermissions")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([roleId])
  @@index([managerId])
}

// --- TABELA CENTRAL DE PERMISSÕES (CORRIGIDA v3) ---
model Permission {
  id         String               @id @default(cuid())
  module     ModuloEnum
  targetType PermissionTargetType // Indica qual FK está preenchida

  // Chaves estrangeiras opcionais separadas
  departmentId String?
  roleId       String?
  userId       String?

  // Relações que usam as FKs opcionais separadas
  department Department? @relation("DepartmentPermissions", fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role       Role?       @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User?       @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt  DateTime    @default(now())

  // Índices
  @@index([targetType, departmentId, module]) // Índices específicos por tipo
  @@index([targetType, roleId, module])
  @@index([targetType, userId, module])
  @@index([departmentId])
  @@index([roleId])
  @@index([userId])

  // Restrição para garantir que apenas uma FK seja preenchida (CHECK constraint - requer SQL nativo ou lógica aplicacional)
  // O Prisma não suporta CHECK constraints diretamente no schema para este caso.
  // A lógica nas APIs (PUT/POST) deve garantir que apenas um ID (departmentId, roleId, OU userId) seja definido com base no targetType.
}


// ---- Modelos NextAuth ----
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- OUTROS MODELOS ---
model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  readAt    DateTime?
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String
  receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([senderId, createdAt(sort: Desc)])
  @@index([receiverId, createdAt(sort: Desc)])
  @@index([senderId, receiverId, createdAt(sort: Desc)])
  @@index([receiverId, senderId, createdAt(sort: Desc)])
}

model PontoRegistro {
  id         String      @id @default(cuid())
  timestamp  DateTime
  type       PontoTipo
  source     PontoSource
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  justificativa String?   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([timestamp])
  @@index([userId, timestamp])
}

model Solicitacao {
  id           String            @id @default(cuid())
  tipo         SolicitacaoTipo
  dataInicio   DateTime          @db.Date
  dataFim      DateTime          @db.Date
  justificativa String?           @db.Text
  observacaoRh String?           @db.Text
  status       SolicitacaoStatus @default(PENDENTE)
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  @@index([userId])
  @@index([status])
  @@index([tipo])
  @@index([dataInicio])
}